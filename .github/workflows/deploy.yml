name: CD - Deploy to AKS

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AZURE_RESOURCE_GROUP: rg-zero-trust-prod
  AKS_CLUSTER_NAME: aks-zero-trust
  ACR_NAME: acrzerotrust
  APP_NAME: zero-trust-app

jobs:
  build-and-push:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Generate image tag
        id: image-tag
        run: |
          TAG="${GITHUB_SHA::7}-$(date +%Y%m%d-%H%M%S)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./App
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ env.IMAGE_TAG }}

      - name: Run Trivy scan on pushed image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  deploy-to-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: https://${{ env.APP_NAME }}.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Create namespace if not exists
        run: |
          kubectl create namespace zero-trust --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Kubernetes manifests
        run: |
          IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}
          export ACR_NAME=${{ env.ACR_NAME }}
          export APP_NAME=${{ env.APP_NAME }}
          export IMAGE_TAG=$IMAGE_TAG

          envsubst < k8s/service-account.yaml | kubectl apply -f -
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          envsubst < k8s/service.yaml | kubectl apply -f -
          envsubst < k8s/network-policy.yaml | kubectl apply -f -
          envsubst < k8s/ingress.yaml | kubectl apply -f -

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/${{ env.APP_NAME }} -n zero-trust --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n zero-trust -l app=${{ env.APP_NAME }}
          kubectl get svc -n zero-trust -l app=${{ env.APP_NAME }}

      - name: Run health check
        run: |
          POD_NAME=$(kubectl get pods -n zero-trust -l app=${{ env.APP_NAME }} -o jsonpath='{.items[0].metadata.name}')
          kubectl exec -n zero-trust $POD_NAME -- curl -f http://localhost:8080/health || exit 1

  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: deploy-to-aks
    if: always()
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      - name: Check pod security policies
        run: |
          kubectl get pods -n zero-trust -o yaml | grep -E "runAsNonRoot|allowPrivilegeEscalation" || true

      - name: Deployment summary
        run: |
          echo "=== Deployment Summary ==="
          kubectl get deployments -n zero-trust
          kubectl get services -n zero-trust
          kubectl get ingress -n zero-trust
          echo "==========================="
